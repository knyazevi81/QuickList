# aiogram
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardButton, InlineKeyboardMarkup

# Modules
import settings
from read_database import Database

""" First settings. """
bot = Bot(settings.TELEG_TOKEN)
dp = Dispatcher(bot)
db = Database(settings.PATH_TO_DB)


# _______Keyboards_______
def auth_keyboad() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text='üë•–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='add_user')
    )


def double_main_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text='–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='double_main')
    )


def main_button(user_id: int) -> InlineKeyboardMarkup:
    if db.is_admin(user_id):
        return InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='add_task'),
            InlineKeyboardButton(text='üö¨ –≤—Å–µ –∑–∞–¥–∞—á–∏', callback_data='all_task'),
            InlineKeyboardButton(text='üìç –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data='admin')
        )
    else:
        return InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='add_task'),
            InlineKeyboardButton(text='üö¨ –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data='all_task')
        )


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä
@dp.message_handler(commands=['start', 'menu'])
async def start_menu(message: types.Message):
    if db.quest_user_in_db(message.from_user.id):
        await bot.send_message(message.from_user.id, f"üë§ –ü—Ä–∏–≤–µ—Ç @{message.from_user.username}"
                                                     f"üÖ∞ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–æ—Ä–∞ - {None}",
                               reply_markup=main_button(message.from_user.id))
    else:
        await bot.send_message(message.from_user.id, f'üß© –ü—Ä–∏–≤–µ—Ç {message.from_user.username}!\n'
                                                     f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç'
                                                     f'—Ä–∏—Ä–æ–≤–∞—Ç—Å—è –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=auth_keyboad())
    settings.LAST_MESSAGE.append(message.message_id + 1)
    settings.LAST_USER.append(message.from_user.id)


@dp.message_handler()
async def main_handler(message: types.Message):
    if message.text.split()[0] == settings.AUTH_TOKEN and not db.quest_user_in_db(message.from_user.id):
        db.add_user(message.from_user.id, message.from_user.username)
        await bot.send_message(message.from_user.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n"
                                                     "–Ω–∞–∂–º–∏—Ç–µ -> /menu")
    elif message.text.split()[0] == settings.ADMIN_TOKEN and db.quest_user_in_db(
            message.from_user.id) and not db.is_admin(message.from_user.id):
        db.add_admin(message.from_user.id)
        await bot.send_message(message.from_user.id, "‚úÖ –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                                                     "–ù–∞–∂–º–∏—Ç–µ -> /menu")


# INLINE HANDLERS
@dp.callback_query_handler(text="add_user")
async def send_auth(callback: types.CallbackQuery):
    await bot.edit_message_text(message_id=settings.LAST_MESSAGE[-1],
                                chat_id=settings.LAST_USER[-1],
                                text="üóø –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å"
                                     "—Å—è –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞—É–Ω—Ç–µ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")


@dp.callback_query_handler(text="add_task")
async def add_task_def(callback: types.CallbackQuery):
    await bot.edit_message_text(message_id=settings.LAST_MESSAGE[-1],
                                chat_id=settings.LAST_USER[-1],
                                text="–¢–ï–°–¢")


@dp.callback_query_handler(text="double_main")
async def double_main(callback: types.CallbackQuery):
    await bot.edit_message_text(message_id=settings.LAST_MESSAGE[-1],
                                chat_id=settings.LAST_USER[-1],
                                text=f"üë§ –ü—Ä–∏–≤–µ—Ç @{message.from_user.username}"
                                     f"üÖ∞ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–æ—Ä–∞ - {None}")


if __name__ == '__main__':
    executor.start_polling(dp)
