# aiogram
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardButton, InlineKeyboardMarkup
# AI
import openai

# Modules
import settings
from read_database import Database

""" First settings. """

bot = Bot(settings.TELEG_TOKEN, proxy=settings.PROXY_URL)
dp = Dispatcher(bot)
db = Database(settings.PATH_TO_DB)

openai.api_key = settings.OPEN_AI_TOKEN
model_engine = 'text-davinci-003'
max_tokens = 128


# _______Keyboards_______
def auth_keyboad() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text='üë•–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='add_user')
    )


def double_main_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text='–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='double_main')
    )


def main_button(user_id: int) -> InlineKeyboardMarkup:
    if db.is_admin(user_id):
        return InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(text='üó£Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç', callback_data='ai'),
            InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='add_task'),
            InlineKeyboardButton(text='‚ûñ –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='kill_task'),
            InlineKeyboardButton(text='üö¨ –ó–∞–¥–∞—á–∏', callback_data='all_task'),
            InlineKeyboardButton(text='üìç –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data='admin')   # –Ω–µ—Ç
        )
    else:
        if db.is_ai_assistent(user_id):
            return InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton(text='üó£Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç', callback_data='ai'),
                InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='add_task'),
                InlineKeyboardButton(text='‚ûñ –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='kill_task'),
                InlineKeyboardButton(text='üö¨ –ó–∞–¥–∞—á–∏', callback_data='all_task'),
                InlineKeyboardButton(text='üë• –û –Ω–∞—Å', callback_data='about_us')
            )
        else:
            return InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton(text='üó£Ô∏è –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞', callback_data='how_ai'),
                InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='add_task'),
                InlineKeyboardButton(text='‚ûñ –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='kill_task'),
                InlineKeyboardButton(text='üö¨ –ó–∞–¥–∞—á–∏', callback_data='all_task'),
                InlineKeyboardButton(text='üë• –û –Ω–∞—Å', callback_data='about_us')
            )


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä
@dp.message_handler(commands=['start', 'menu'])
async def start_menu(message: types.Message):
    if db.quest_user_in_db(message.from_user.id):
        await bot.send_message(
            message.from_user.id,
            "–ß—Ç–æ —Ç–∞–∫–æ–µ Quicklist  —ç—Ç–æ –±–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ"
            "–º ChatGPT, –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º\n\n"
            "–ò–¥–µ–∏ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏:\n"
            "~–î–æ–±–∞–≤–∏—Ç—å –∏–∏~\n"
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
            "–Ω–∞—Å—Ç—Ä–æ–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "**************************************\n"
            "—á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /updatenotifies",
            parse_mode="MarkdownV2",
            reply_markup=double_main_button()
        )
    else:
        await bot.send_message(
            message.from_user.id,
            f'üß© –ü—Ä–∏–≤–µ—Ç {message.from_user.username}!\n'
            f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç'
            f'—Ä–∏—Ä–æ–≤–∞—Ç—Å—è –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É',
            reply_markup=auth_keyboad()
        )


@dp.message_handler(commands="uptask")
async def add_task_db(message: types.Message):
    if len(message.text.split()) == 1 and db.quest_user_in_db(message.from_user.id):
        await bot.send_message(
            message.from_user.id,
            " ‚õî –í—ã –∑–∞–±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ",
            reply_markup=double_main_button()
        )
    elif len(message.text.split()) != 1 and db.quest_user_in_db(message.from_user.id):
        db.add_task(message.from_user.id, str(message.text[8:]))
        await bot.send_message(
            message.from_user.id,
            '‚úÖ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞',
            reply_markup=double_main_button()
        )


@dp.message_handler(commands="deltask")
async def del_task_db(message: types.Message):
    if len(message.text.split()) == 1 and db.quest_user_in_db(message.from_user.id):
        await bot.send_message(
            message.from_user.id,
            " ‚õî –í—ã –∑–∞–±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ",
            reply_markup=double_main_button()
        )
    elif len(message.text.split()) != 1 and db.quest_user_in_db(message.from_user.id):
        try:
            if isinstance(int(message.text.split()[1]), int) and db.del_task(message.from_user.id, message.text.split()[1]):
                await bot.send_message(
                    message.from_user.id,
                    '‚úÖ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
                    reply_markup=double_main_button()
                )
            else:
                await bot.send_message(
                    message.from_user.id,
                    '‚õî –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞—á–∏'
                )
        except ValueError:
            await bot.send_message(
                message.from_user.id,
                " ‚õî –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω id",
                reply_markup=double_main_button()
            )


@dp.message_handler(commands="updatenotifies")
async def del_task_db(message: types.Message):
    if db.update_notifier(message.from_user.id):
        await bot.send_message(
            message.from_user.id,
            "üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã",
            reply_markup=double_main_button()
        )
    else:
        await bot.send_message(
            message.from_user.id,
            "üîï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã",
            reply_markup=double_main_button()
        )


@dp.message_handler()
async def main_handler(message: types.Message):
    if message.text.split()[0] == settings.AUTH_TOKEN and not db.quest_user_in_db(message.from_user.id):
        db.add_user(message.from_user.id, message.from_user.username)
        await bot.send_message(
            message.from_user.id,
            " ‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n"
            "–Ω–∞–∂–º–∏—Ç–µ -> /menu"
        )
    elif message.text.split()[0] == settings.ADMIN_TOKEN and db.quest_user_in_db(
            message.from_user.id) and not db.is_admin(message.from_user.id):
        db.add_admin(message.from_user.id)
        await bot.send_message(
            message.from_user.id,
            " ‚úÖ –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            "–ù–∞–∂–º–∏—Ç–µ -> /menu"
        )
    elif message.text[0:3] == 'tok' and message.chat.type == 'private':
        if db.get_ai(message.from_user.id, message.text):
            await bot.send_message(
                message.from_user.id,
                " ‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                reply_markup=double_main_button())
        else:
            await bot.send_message(
                message.from_user.id,
                " ‚õî –¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                reply_markup=double_main_button()
            )
    else:
        if db.is_ai_assistent(message.from_user.id):
            await bot.send_message(
                message.from_user.id,
                'üí§üí§–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è—Ç–µ—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...',
                reply_to_message_id=message.message_id
            )
            completion = openai.Completion.create(
                engine=model_engine,
                prompt=message.text,
                max_tokens=1024,
                temperature=0.5,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0
            )
            await bot.edit_message_text(
                message_id=message.message_id + 1,
                chat_id=message.from_user.id,
                text=str(completion.choices[0].text),
                reply_markup=double_main_button()
            )

        else:
            await bot.send_message(message.from_user.id,
                                   ' ‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É',
                                   reply_markup=double_main_button()
                                   )


# INLINE HANDLERS
@dp.callback_query_handler(text="add_user")
async def send_auth(call: types.CallbackQuery):
    await bot.edit_message_text(message_id=call.message.message_id,
                                chat_id=call.from_user.id,
                                text="üóø –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å"
                                     "—Å—è –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞—É–Ω—Ç–µ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: "
                                )


@dp.callback_query_handler(text="add_task", )
async def add_task_def(call: types.CallbackQuery):
    await bot.delete_message(message_id=call.message.message_id - 1, chat_id=call.from_user.id)
    await bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text='*–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–ø–∏—à–∏—Ç–µ*\n\n'
        '*–ø—Ä–∏–º–µ—Ä:*\n'
        '/uptask –∫—É–ø–∏—Ç—å –∫—É—Ä–∏—Ü—É –∫ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—é\n'
        '/uptask —Å–¥–µ–ª–∞—Ç—å –ø–ª–æ–≤ \n\n'
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã –µ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n'
        '–∫—É–¥–∞ –Ω–∞–∂–∏–º–∞—Ç—å    ‚û°Ô∏è   ```/uptask```     '.format(call.data),
        parse_mode="MarkdownV2",
        reply_markup=double_main_button()
    )


@dp.callback_query_handler(text="kill_task", )
async def add_task_def(call: types.CallbackQuery):
    await bot.delete_message(message_id=call.message.message_id - 1, chat_id=call.from_user.id)
    await bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text='*–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–ø–∏—à–∏—Ç–µ\n'
        '/deltask –∏ –∞–π–¥–∏ –∑–∞–¥–∞—á–∏*\n\n'
        '*–ø—Ä–∏–º–µ—Ä:*\n'
        '/deltask 1\n'
        '/deltask 8 \n\n'
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã –µ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n'
        '–∫—É–¥–∞ –Ω–∞–∂–∏–º–∞—Ç—å    ‚û°Ô∏è   ```/deltask```     '.format(call.data),
        parse_mode="MarkdownV2",
        reply_markup=double_main_button()
    )


@dp.callback_query_handler(text="double_main")
async def double_main(call: types.CallbackQuery):
    type_user = {
        1: "‚úÖ",
        0: "‚õî"
    }
    data = f"*–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ë–æ—Ç–∞*\n" \
           f"*—Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Äa—Ç–æ—Ä–∞:*  " \
           f"{type_user[int(db.is_admin(call.from_user.id))]}\n" \
           f"*–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç GPT:*  " \
           f"{type_user[int(db.is_ai_assistent(call.from_user.id))]}\n" \

    await bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f"‚ÄºÔ∏è {call.from_user.first_name} –Ω–∞ –¥–∞–Ω–Ω—ã–π\n"
        f"–º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è {db.now_tasks_num(call.from_user.id)} –∑–∞–¥–∞"
        f"—á"
    )

    await bot.send_message(
        call.message.chat.id,
        data.format(call.data),
        parse_mode="MarkdownV2",
        reply_markup=main_button(call.from_user.id)
    )


@dp.callback_query_handler(text="all_task")
async def about(call: types.CallbackQuery):
    await bot.delete_message(message_id=call.message.message_id - 1, chat_id=call.from_user.id)
    data = db.how_undone_tasks(call.from_user.id)
    out_data = "--id--|-----description-----\n"
    for id_task, text_task in data:
        out_data += f"[{id_task}]-üü•: {text_task}\n"
    await bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=out_data,
        reply_markup=double_main_button()
        )


@dp.callback_query_handler(text="ai")
async def about(call: types.CallbackQuery):
    await bot.delete_message(message_id=call.message.message_id - 1, chat_id=call.from_user.id)
    await bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f'–ó–Ω–∞–∫–æ–º—å—Å—è @{call.from_user.first_name} —ç—Ç–æ –ò–ò ChatGPT(3.5)\n'
        f'---------------------------------\n'
        f'‚ùó –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É '
        f'–≤–æ—Å–∫–ª–∏—Ü–∞–µ—Ç–ª—å–Ω—ã–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º '
        f'–∑–Ω–∞–∫–æ–º, –∏–Ω–∞—á–µ –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å'
        f'–∏ –æ—Ç–≤–µ—Ç–∏—Ç —Å–∞–º –Ω–∞ —Å–µ–±—è\n'
        f'‚ùó GPT-3.5 –ø–ª–æ—Ö –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫'
        f' –µ–≥–æ –æ—Ç–≤–µ—Ç–∞–º —Å —Å–æ–º–Ω–µ–Ω–∏–µ–º!\n'
        f'---------------------------------\n'
        f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å',
        reply_markup=double_main_button()
    )


@dp.callback_query_handler(text="how_ai")
async def about(call: types.CallbackQuery):
    await bot.delete_message(message_id=call.message.message_id - 1, chat_id=call.from_user.id)
    await bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f"{call.from_user.first_name} –¥–ª—è —Ç–æ–≥–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏"
        f"–∏ –Ω–∞–ø–∏—à–∏ @ilpdakz",
        reply_markup=double_main_button()
    )


@dp.callback_query_handler(text="about_us")
async def about(call: types.CallbackQuery):
    await bot.delete_message(message_id=call.message.message_id - 1, chat_id=call.from_user.id)
    await bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text="–ú–µ–Ω—è –∑–æ–≤—É—Ç –•–∞—Å–∞–Ω –∏ —è —è–≤–ª—è—é—Å—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞. –ú–æ–π –±–æ—Ç –ø—Ä"
        "–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç "
        "–≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∞ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç"
        " –≤–∞–º –ø–æ–º–æ—á—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é chat-gpt. –Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é –Ω"
        "–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–µ–¥–æ—Å"
        "—Ç–∞–≤–ª—è—Ç—å –≤–∞–º –ª—É—á—à–∏–π –æ–ø—ã—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª"
        "–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π. –Ø –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º. @ilpdak"
        "z",
        reply_markup=double_main_button()
    )


if __name__ == '__main__':
    executor.start_polling(dp)
